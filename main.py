import datetime as dt


class Record:
    # Для нулевых значений по умолчанию, стилистически правильнее будет
    # использовать None и проверять через if date is None. Тут это роли
    # не играет, но в случаях когда нулевое значение может быть релевантным,
    # к примеру если производятся операции с индексами списка, эта привычка
    # может спасти от багов. Но это просто небольшая рекомендация)
    def __init__(self, amount, comment, date=''):
        self.amount = amount
        # Тернарный оператор вещь хорошая, но только если его можно написать
        # в виде короткой лаконичной строки, если же он получается громоздким,
        # то лучше использовать полноценный if else
        self.date = (
            # Тут можно воспользоваться dt.date.today() будет на одну
            # операцию меньше
            dt.datetime.now().date() if
            not
            date else dt.datetime.strptime(date, '%d.%m.%Y').date())
        self.comment = comment


class Calculator:
    def __init__(self, limit):
        self.limit = limit
        self.records = []

    def add_record(self, record):
        self.records.append(record)

    def get_today_stats(self):
        today_stats = 0
        # Тут ты переиспользуешь имя Record, которым у тебя назван класс,
        # так делать не стоит. В цикле for инициализируется новая переменная,
        # как и все переменные (за исключением констант) одна должна
        # именоваться с маленькой буквы и не использовать глобальных имён
        for Record in self.records:
            if Record.date == dt.datetime.now().date():
                # Можно использовать +=, но это не критично
                today_stats = today_stats + Record.amount
        return today_stats

    def get_week_stats(self):
        week_stats = 0
        today = dt.datetime.now().date()
        # Тут как раз переменная цикла правильно именована
        for record in self.records:
            # Подумай как можно лаконичнее написать это сравнение.
            # Подсказка: к примеру можно разницу дат определить в переменную
            if (
                (today - record.date).days < 7 and
                (today - record.date).days >= 0
            ):
                week_stats += record.amount
        return week_stats


class CaloriesCalculator(Calculator):
    # Если функция или метод требую комментария, то лучше его оформить в виде
    # докстринги в соответствии с PEP257: """Твой комментарий к функции"""
    # Тут подробнее: https://peps.python.org/pep-0257/
    def get_calories_remained(self):  # Получает остаток калорий на сегодня
        # Переменным следует именовать в соответствии с их смыслом,
        # по-английски
        x = self.limit - self.get_today_stats()
        if x > 0:
            # Использовать бэкслэши для переноса строки
            # не очень хорошая практика, если строка требует переноса,
            # то лучше заключить её в скобки.
            return f'Сегодня можно съесть что-нибудь' \
                   f' ещё, но с общей калорийностью не более {x} кКал'
        # Этот else здесь роли не играет, можно его убрать,
        # так как если будет выполнено условие выше,
        # то выполнение функции и так завершится на предыдущем этапе
        else:
            # return это не функция, так что скобки здесь ни к чему
            return('Хватит есть!')


class CashCalculator(Calculator):
    # Тут не нужен float, можно задать просто цифрами
    USD_RATE = float(60)  # Курс доллар США.
    EURO_RATE = float(70)  # Курс Евро.

    # Аргументы функции следует именовать маленькими буквами,
    # оставив капс только названиям констант.
    # Передавать в этот метод usd_rate и euro_rate ни к чему,
    # мы можем обращаться к ним через self, как и к любому атрибуту класса
    def get_today_cash_remained(self, currency,
                                USD_RATE=USD_RATE, EURO_RATE=EURO_RATE):
        # Эта строка никакой роли не играет
        currency_type = currency
        # Отлично, что переиспользуешь метод)
        cash_remained = self.limit - self.get_today_stats()
        if currency == 'usd':
            cash_remained /= USD_RATE
            currency_type = 'USD'
        elif currency_type == 'eur':
            cash_remained /= EURO_RATE
            currency_type = 'Euro'
        elif currency_type == 'rub':
            # == это операция сравнения, в строке ниже
            # у тебя просто возвращается True, которое никуда не записывается,
            # так что это строка тут лишняя
            cash_remained == 1.00
            currency_type = 'руб'
        if cash_remained > 0:
            return (
                # В f-строках лучше только подставлять переменные
                # и не выполнять в них операций, округлить значения
                # можно с помощью форматирования строк так же
                # как ты это делаешь ниже с методом format
                f'На сегодня осталось {round(cash_remained, 2)} '
                f'{currency_type}'
            )
        # elif тут можно заменить на просто if,
        # так как если предыдущее условие будет истинно,
        # то выполнение метода на этом завершится
        elif cash_remained == 0:
            return 'Денег нет, держись'
        # Этот elif тут лишний, можно просто вернуть строку,
        # так как если условия выше оказались истинными,
        # то выполнение функции будет завершено
        elif cash_remained < 0:
            # Тут вместо бэкслеша, так же лучше использовать скобки,
            # как ты сделал выше.
            # Хорошо, что пробуешь разные методы форматирования строк,
            # но в продакшене лучше держать код консистентным
            return 'Денег нет, держись:' \
                   ' твой долг - {0:.2f} {1}'.format(-cash_remained,
                                                     currency_type)

    # Эта функция не имеет смысла, к тому же теперь она ничего не возвращает,
    # лучше всю логику работы этой функции оставить в классе Calculator
    def get_week_stats(self):
        super().get_week_stats()

# В целом выполнено хорошо,
# грамотно убрана повторяющаяся логика в родительский класс,
# код довольно консистентный.
# Но можно улучшить код.
# Например, добавив валидацию: что будет если, к примеру, будет указана валюта,
# которая не предусмотрена методом. Указана дата из будущего
# или отрицательное значение в Record.amount.
